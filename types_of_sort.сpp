#include <iostream>


template <typename T>
void bubble_sorting(T* arr, size_t arr_size, bool flag = false)
{
	for (size_t i = 0; i < arr_size; ++i)
	{
		for (size_t j = 0; j < arr_size-1; ++j)
		{
			if (((arr[j]>arr[j+1])&&(flag == false)) ||((arr[j]<arr[j+1])&&(flag == true)))
			{
				T tmp_value = arr[j];
				arr[j] = arr[j+1];
				arr[j+1] = tmp_value;
			}
		}
	}
}

template <typename T>
void quick_sorting(T* arr, size_t start, size_t end)
{
	if (start >= end)
	{
		return;
	}
	size_t current = start;
	size_t pivotIndex = start + (rand() % (end - start + 1));
	T pivotValue = arr[pivotIndex];
	std::swap(arr[start], arr[pivotIndex]);
	for (size_t i = start + 1; i <=end; ++i)
	{
		if (arr[i] < arr[start])
		{
			++current;
			std::swap(arr[i],arr[current]);
		}
	}
	std::swap(arr[start],arr[current]);
	if (current > start)
	{
		quick_sorting(arr,start,current - 1); // sort on left
	}
	if (end >= current + 1)
	{
		quick_sorting(arr,current + 1, end); // sort on right
	}
}

template <typename T>
void merge_sorting(T* arr, size_t start, size_t end)
{
	if (end - start < 2)
	{
		return;
	}
	if (end - start == 2)
	{
		if (arr[start] > arr[end])
		{
			T tmp_value = arr[start];
			arr[start] = arr[end-1];
			arr[end-1] = tmp_value;
		}
		return;
	}
	size_t el = start + (end - start) / 2;
    merge_sorting(arr, start, el);
	merge_sorting(arr, el, end);
	// combining the halves
	T* new_arr = new T[end-start];
	size_t i = start;
	size_t j = el;
	size_t k = 0;
	while ((i < el)&&(j < end))
	{
	    if (arr[i] <= arr[j])
	    {
	        new_arr[k++] = arr[i++];
	    }
	    else
	    {
	        new_arr[k++] = arr[j++];
	    }
	}
	while (i < el)
	{
	    new_arr[k++] = arr[i++];
	}
	while (j < end)
	{
	    new_arr[k++] = arr[j++];
	}
	for (size_t i = 0; i < k; ++i)
	{
		arr[start + i] = new_arr[i];
	}
	delete[] new_arr;
}

template <typename T>
void print_arr (T* arr, size_t arr_size)
{
	for (size_t i = 0; i < arr_size; ++i)
	{
		std::cout << arr[i] << ' ';
	}
	std::cout << endl;
}

template <typename T>
void input_arr (T* arr, size_t arr_size)
{
	for (size_t i = 0; i < arr_size; ++i)
	{
		std::cin >> arr[i];
	}
}
