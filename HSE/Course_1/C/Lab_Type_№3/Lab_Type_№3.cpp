
#include <stdio.h> //указывает и подключает расположенные файлы, библиотека потока ввода и вывода
#include <math.h> // библиотека математичских констант и функций

// протипы функций
long long int factorial(long long int _n); // факториал
int choice(); // команда пользователя
void command_1(); // команда 1, которая считает с заданной точностью
void command_2(); // команда 2, которая счиает с заданным кол-вом членов последовательности

int main()
{
    switch (choice())
    {
    case 1:
        command_1(); // выполение функции команда 1
        break;
    case 2:
        command_2(); // выполение функции команда 2
        break;
    default:
        printf("The command does not exist\n"); // вывод в консоль, если пользователь ввёл параметр, которого не рассматривается выше
        break;
    }
    return 0;
}

int choice()
{
    int x = 0; // целочисленная переменная, которая запоминает команду пользователя
    printf("With the specified accuracy=1\nFor a given number of row members=2\nYour choice="); // вывод в консоль
    scanf_s("%d", &x); // считывание c клавиатуры x
    return x; // возвращение x
}

void command_1() // функция команда 1, которая считает выражение с заданной точностью
{
    double tmp_E, x, tmp_sum=1; // объявление вещественных переменных эпсилон, числа x, которое будет использоваться в вычисление членов последовательности, а также инициализирование 1, из которой будут вычитаться дроби (члены)
    printf("Enter E="); // ввод в консоль
    scanf_s("%lf", &tmp_E); // считывание с клавиатуры эпсилон
    printf("Enter x="); // ввод в консоль 
    scanf_s("%lf", &x); // считывание с клавиатуры x
    if (fabs(x) >= 1) // проверка на то, что x по модулю больше или равен 1
    {
        printf("Error x\n"); // данный x не подходит по условию задачи и выводится на консоль
    }
    else // иначе (если подходит по условию)
    {
        long long int i = 1; // целочисленная переменная, которая будет считать член последовательности, начиная с 1
        while (1) // цикл, который будет бесконечный, пока в теле его не будет команды, которая выйдет из него (break)
        {
            double fraction = (factorial((2 * i)) * pow(x, i)) / ((1 - 2 * i) * pow(factorial(i), 2) * pow(4, i)); // объявление вещественной переменной дробь, в которой считается i-ый член последовательности, используя математические функции, а также функция факториал
            i++; // увеличивет i на 1
            if (fabs(fraction) < fabs(tmp_E)) // условие на то, что дробь по модулю меньше эпсилона
            {
                break; // тогда выходим из цикла while
            }
            else // иначе
            {
                tmp_sum += fraction; // из переменной вычитаем полученную дробь
            }
        }
        printf("%lf", tmp_sum); // вывод полученной переменной
    }
}

void command_2() // функция команда 1, которая считает выражение с заданным кол-во членов последовательности
{
    int tmp_n; // целочисленная переменная, которая хранит в себе кол-во членов последовательности
    printf("Enter n="); // ввод в консоль
    scanf_s("%d", &tmp_n); // считывание с клавиатуры кол-во членов последовательности
    double x, tmp_sum = 1; // объявление вещественных переменных x и tmp_sum
    printf("Enter x="); // ввод в консоль
    scanf_s("%lf", &x); // считывание с клавиатуры параметра x
    if (fabs(x) >= 1) // условие (проверка), что x по модулю больше или равен 1
    {
        printf("Error x\n");// вывод в консоль
    }
    else // иначе считает значение каждого члена последовательности
    {
        for (int i = 1; i <= tmp_n; i++) // цикл, который считает n членов последовательности
        {
            double fraction = ((factorial((2 * i)) * pow(x, i))) / ((1 - 2 * i) * pow(factorial(i), 2) * pow(4, i)); // объявление вещественной переменной дробь, в которой считается i-ый член последовательности, используя математические функции, а также функция факториал
            tmp_sum += fraction; // складываем полученную дробь с tmp_sum
        }
        printf("%lf\n", tmp_sum); // вывод полученной переменной
    }
}

long long int factorial(long long int _n) // функция факториал, 
{
    long long int fact_sum = 1; // целочисленная переменная, которая будет хранить произвдение n чисел , начиная с 1
    for (long long int j = 1; j <= _n; j++) // цикл от 1 до n, включительно
    {
        fact_sum *= j;
    }
    return fact_sum; // возвращение переменной
}
